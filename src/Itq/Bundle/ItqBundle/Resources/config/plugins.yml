services:

  # plugins/httprotocolhandler

  itq.httpprotocolhandler.native:
    class:     Itq\Common\Plugin\HttpProtocolHandler\NativeHttpProtocolHandler
    tags:      [{name: 'app.httprotocolhandler', protocols: 'http,https', methods: 'GET'}]


  # plugins/generators

  itq.generator.password:
    class:     Itq\Common\Plugin\Generator\PasswordGenerator
    arguments: ['@app.password', '@app.vault']
    tags:      [{name: 'app.generator'}]
  itq.generator.string:
    class:     Itq\Common\Plugin\Generator\StringGenerator
    arguments: ['%app_default_device_platform%', '%app_storage_url_pattern%', '%app_dynamic_url_patterns%']
    tags:      [{name: 'app.generator'}]


  # plugins/migrators

  itq.migrator.php:
    class:     Itq\Common\Plugin\Migrator\PhpMigrator
    calls:     [['setEventDispatcher', ['@event_dispatcher']]]
    tags:      [{name: 'app.migrator', extension: 'php'}]
  itq.migrator.sh:
    class:     Itq\Common\Plugin\Migrator\ShMigrator
    calls:     [['setEventDispatcher', ['@event_dispatcher']]]
    tags:      [{name: 'app.migrator', extension: 'sh'}]
  itq.migrator.yaml:
    class:     Itq\Common\Plugin\Migrator\YamlMigrator
    arguments: ['@app.yaml']
    tags:      [{name: 'app.migrator', extension: 'yaml'}]


  # plugins/actions

  itq.action.addvar:
    class:     Itq\Common\Plugin\Action\AddVarAction
    arguments: ['@service_container']
    tags:      [{name: 'app.action'}]
  itq.action.mail:
    class:     Itq\Common\Plugin\Action\MailAction
    arguments: ['@app.template', '@translator', '@app.attachment', '@app.customizer', '@event_dispatcher', '%app_senders%', '%app_recipients%', '%app_env%', '@request_stack', '@app.tenant', '%locale%']
    tags:      [{name: 'app.action'}]
  itq.action.pushnotification:
    class:     Itq\Common\Plugin\Action\PushNotificationAction
    arguments: ['@app.template', '@translator', '@app.attachment', '@app.customizer', '@event_dispatcher', '%app_senders%', '%app_recipients%', '%app_env%', '@request_stack', '@app.tenant', '%locale%']
    tags:      [{name: 'app.action'}]
  itq.action.sms:
    class:     Itq\Common\Plugin\Action\SmsAction
    arguments: ['@app.template', '@translator', '@app.attachment', '@app.customizer', '@event_dispatcher', '%app_senders%', '%app_recipients%', '%app_env%', '@request_stack', '@app.tenant', '%locale%']
    tags:      [{name: 'app.action'}]
  itq.action.task:
    class:     Itq\Common\Plugin\Action\TaskAction
    arguments: ['@app.task', '@app.crud']
    tags:      [{name: 'app.action'}]


  # plugins/codegenerators

  itq.codegenerator.sdk:
    class:     Itq\Common\Plugin\CodeGenerator\SdkCodeGenerator
    tags:      [{name: 'app.codeGenerator'}]


  # plugins/connectionbags

  itq.connectionbag.mongo:
    class:     Itq\Common\Plugin\ConnectionBag\MongoConnectionBag
    arguments: [[]]
    tags:      [{name: 'app.connection_bag', type: 'mongo'}]


  # plugins/datacollectors

  itq.datacollector.database:
    class: Itq\Common\Plugin\DataCollector\DatabaseDataCollector
    arguments: ['%kernel.debug%']
    tags:
      - { name: 'data_collector', template: 'ItqBundle:data-collector:database.html.twig', id: 'app_database'}
      - { name: 'kernel.event_listener', event: 'database.query.executed', method: 'onDatabaseQueryExecuted'}


  # plugins/documentbuilders

  itq.documentbuilder.excel:
    class:     Itq\Common\Plugin\DocumentBuilder\ExcelDocumentBuilder
    tags:      [{name: 'app.document_builder', type: 'excel'}]


  # plugins/exceptiondescriptors

  itq.exceptiondescriptor.authenticationexception:
    class:     Itq\Common\Plugin\ExceptionDescriptor\AuthenticationExceptionExceptionDescriptor
    tags:      [{name: 'app.exceptiondescriptor'}]
  itq.exceptiondescriptor.bulkexception:
    class:     Itq\Common\Plugin\ExceptionDescriptor\BulkExceptionExceptionDescriptor
    tags:      [{name: 'app.exceptiondescriptor'}]
  itq.exceptiondescriptor.errorexception:
    class:     Itq\Common\Plugin\ExceptionDescriptor\ErrorExceptionExceptionDescriptor
    tags:      [{name: 'app.exceptiondescriptor'}]
  itq.exceptiondescriptor.formvalidationexception:
    class:     Itq\Common\Plugin\ExceptionDescriptor\FormValidationExceptionExceptionDescriptor
    tags:      [{name: 'app.exceptiondescriptor'}]
  itq.exceptiondescriptor.methodnotallowedhttpexception:
    class:     Itq\Common\Plugin\ExceptionDescriptor\MethodNotAllowedHttpExceptionExceptionDescriptor
    tags:      [{name: 'app.exceptiondescriptor'}]
  itq.exceptiondescriptor.namedbusinessruleexception:
    class:     Itq\Common\Plugin\ExceptionDescriptor\NamedBusinessRuleExceptionExceptionDescriptor
    tags:      [{name: 'app.exceptiondescriptor'}]
  itq.exceptiondescriptor.notfoundhttpexception:
    class:     Itq\Common\Plugin\ExceptionDescriptor\NotFoundHttpExceptionExceptionDescriptor
    tags:      [{name: 'app.exceptiondescriptor'}]
  itq.exceptiondescriptor.unsupportedaccounttypeexception:
    class:     Itq\Common\Plugin\ExceptionDescriptor\UnsupportedAccountTypeExceptionExceptionDescriptor
    tags:      [{name: 'app.exceptiondescriptor'}]


  # plugins/formatters

  itq.formatter.excel:
    class:     Itq\Common\Plugin\Formatter\ExcelFormatter
    arguments: ['@app.documentbuilder']
    tags:      [{name: 'app.formatter'}]
  itq.formatter.json:
    class:     Itq\Common\Plugin\Formatter\JsonFormatter
    arguments: ['@jms_serializer']
    tags:      [{name: 'app.formatter'}]
  itq.formatter.xml:
    class:     Itq\Common\Plugin\Formatter\XmlFormatter
    arguments: ['@jms_serializer']
    tags:      [{name: 'app.formatter'}]
  itq.formatter.yaml:
    class:     Itq\Common\Plugin\Formatter\YamlFormatter
    arguments: ['@app.yaml']
    tags:      [{name: 'app.formatter'}]


  # plugins/ruletypes

  itq.ruletype.value:
    class:     Itq\Common\Plugin\RuleType\ValueRuleType
    arguments: ['@app.expression']
    tags:      [{name: 'app.rule_type'}]


  # plugins/typeguessbuilders

  itq.typeguessbuilder.basiclist:
    class: Itq\Common\Plugin\TypeGuessBuilder\BasicListTypeGuessBuilder
    tags: [{name: app.typeguessbuilder, id: basicList}]
  itq.typeguessbuilder.boolean:
    class: Itq\Common\Plugin\TypeGuessBuilder\BooleanTypeGuessBuilder
    tags: [{name: app.typeguessbuilder, id: boolean}]
  itq.typeguessbuilder.embeddedlist:
    class: Itq\Common\Plugin\TypeGuessBuilder\EmbeddedListTypeGuessBuilder
    arguments:
      - '@app.metadata'
    tags: [{name: app.typeguessbuilder, id: embeddedList}]
  itq.typeguessbuilder.embeddedreference:
    class: Itq\Common\Plugin\TypeGuessBuilder\EmbeddedReferenceTypeGuessBuilder
    tags: [{name: app.typeguessbuilder, id: embeddedReference}]
  itq.typeguessbuilder.embedded:
    class: Itq\Common\Plugin\TypeGuessBuilder\EmbeddedTypeGuessBuilder
    arguments:
      - '@app.metadata'
    tags: [{name: app.typeguessbuilder, id: embedded}]
  itq.typeguessbuilder.enum:
    class: Itq\Common\Plugin\TypeGuessBuilder\EnumTypeGuessBuilder
    arguments:
      - '@app.metadata'
    tags: [{name: app.typeguessbuilder, id: enum}]
  itq.typeguessbuilder.hashList:
    class: Itq\Common\Plugin\TypeGuessBuilder\HashListTypeGuessBuilder
    arguments:
      - '@app.metadata'
    tags: [{name: app.typeguessbuilder, id: hashList}]
  itq.typeguessbuilder.id:
    class: Itq\Common\Plugin\TypeGuessBuilder\IdTypeGuessBuilder
    tags: [{name: app.typeguessbuilder, id: id}]
  itq.typeguessbuilder.reference:
    class: Itq\Common\Plugin\TypeGuessBuilder\ReferenceTypeGuessBuilder
    tags: [{name: app.typeguessbuilder, id: reference}]
  itq.typeguessbuilder.storage:
    class: Itq\Common\Plugin\TypeGuessBuilder\StorageTypeGuessBuilder
    tags: [{name: app.typeguessbuilder, id: storage}]
  itq.typeguessbuilder.taglist:
    class: Itq\Common\Plugin\TypeGuessBuilder\TagListTypeGuessBuilder
    tags: [{name: app.typeguessbuilder, id: tagList}]
  itq.typeguessbuilder.unknown:
    class: Itq\Common\Plugin\TypeGuessBuilder\UnknownTypeGuessBuilder
    tags: [{name: app.typeguessbuilder, id: unknown}]
  itq.typeguessbuilder.witness:
    class: Itq\Common\Plugin\TypeGuessBuilder\WitnessTypeGuessBuilder
    tags: [{name: app.typeguessbuilder, id: witness}]
  itq.typeguessbuilder.workflow:
    class: Itq\Common\Plugin\TypeGuessBuilder\WorkflowTypeGuessBuilder
    tags: [{name: app.typeguessbuilder, id: workflow}]


  # plugins/datafilters

  itq.datafilter.modelrestrict:
    class:     Itq\Common\Plugin\DataFilter\ModelRestrictDataFilter
    arguments: ['@app.metadata']
    tags:      [{name: 'app.datafilter'}]


  # plugins/uniquecodegeneratoralgorithms

  itq.uniquecodegeneratoralgorithm.itq:
    class:     Itq\Common\Plugin\UniqueCodeGeneratorAlgorithm\ItqUniqueCodeGeneratorAlgorithm
    tags:      [{name: 'app.unique_code_generator_algorithm'}]


  # plugins/modelcleaners

  itq.modelcleaner.populatestorages:
    class:     Itq\Common\Plugin\ModelCleaner\PopulateStoragesModelCleaner
    arguments: ['@app.metadata', '@app.storage']
    tags:      [{name: 'app.modelcleaner', priority: 300}]
  itq.modelcleaner.refreshcached:
    class:     Itq\Common\Plugin\ModelCleaner\RefreshCachedModelCleaner
    arguments: ['@app.metadata', '@app.crud']
    tags:      [{name: 'app.modelcleaner', priority: 280}]
  itq.modelcleaner.refreshembeddedreferencelinks:
    class:     Itq\Common\Plugin\ModelCleaner\RefreshEmbeddedReferenceLinksModelCleaner
    arguments: ['@app.metadata', '@app.crud']
    tags:      [{name: 'app.modelcleaner', priority: 290}]
  itq.modelcleaner.triggertrackers:
    class:     Itq\Common\Plugin\ModelCleaner\TriggerTrackersModelCleaner
    arguments: ['@app.metadata', '@app.crud', '@app.expression']
    tags:      [{name: 'app.modelcleaner', priority: 270}]


  # plugins/modeldynamicpropertybuilders

  itq.modeldynamicpropertybuilder.dynamicurls:
    class:     Itq\Common\Plugin\ModelDynamicPropertyBuilder\DynamicUrlsModelDynamicPropertyBuilder
    arguments: ['@app.dynamicurl']
    tags:      [{name: 'app.modeldynamicpropertybuilder', priority: 260}]
  itq.modeldynamicpropertybuilder.storageurls:
    class:     Itq\Common\Plugin\ModelDynamicPropertyBuilder\StorageUrlsModelDynamicPropertyBuilder
    arguments: ['@app.metadata', '@app.crud', '@app.generator']
    tags:      [{name: 'app.modeldynamicpropertybuilder', priority: 270}]
  itq.modeldynamicpropertybuilder.virtualembeddedreferencelists:
    class:     Itq\Common\Plugin\ModelDynamicPropertyBuilder\VirtualEmbeddedReferenceListsModelDynamicPropertyBuilder
    arguments: ['@app.metadata', '@app.crud']
    tags:      [{name: 'app.modeldynamicpropertybuilder', priority: 300}]
  itq.modeldynamicpropertybuilder.virtualembeddedreferences:
    class:     Itq\Common\Plugin\ModelDynamicPropertyBuilder\VirtualEmbeddedReferencesModelDynamicPropertyBuilder
    arguments: ['@app.metadata', '@app.crud']
    tags:      [{name: 'app.modeldynamicpropertybuilder', priority: 290}]
  itq.modeldynamicpropertybuilder.virtuals:
    class:     Itq\Common\Plugin\ModelDynamicPropertyBuilder\VirtualsModelDynamicPropertyBuilder
    arguments: ['@app.metadata', '@app.crud']
    tags:      [{name: 'app.modeldynamicpropertybuilder', priority: 280}]


  # plugins/modelpropertymutators

  itq.modelpropertymutator.basiclists:
    class:     Itq\Common\Plugin\ModelPropertyMutator\BasicListsModelPropertyMutator
    tags:      [{name: 'app.modelpropertymutator', priority: 280}]
  itq.modelpropertymutator.cachedlists:
    class:     Itq\Common\Plugin\ModelPropertyMutator\CachedListsModelPropertyMutator
    tags:      [{name: 'app.modelpropertymutator', priority: 240}]
  itq.modelpropertymutator.embeddedlists:
    class:     Itq\Common\Plugin\ModelPropertyMutator\EmbeddedListsModelPropertyMutator
    tags:      [{name: 'app.modelpropertymutator', priority: 250}]
  itq.modelpropertymutator.embeddedreferences:
    class:     Itq\Common\Plugin\ModelPropertyMutator\EmbeddedReferencesModelPropertyMutator
    arguments: ['@app.metadata']
    tags:      [{name: 'app.modelpropertymutator', priority: 300}]
  itq.modelpropertymutator.embeddeds:
    class:     Itq\Common\Plugin\ModelPropertyMutator\EmbeddedsModelPropertyMutator
    arguments: ['@app.metadata']
    tags:      [{name: 'app.modelpropertymutator', priority: 290}]
  itq.modelpropertymutator.hashlists:
    class:     Itq\Common\Plugin\ModelPropertyMutator\HashListsModelPropertyMutator
    tags:      [{name: 'app.modelpropertymutator', priority: 260}]
  itq.modelpropertymutator.taglists:
    class:     Itq\Common\Plugin\ModelPropertyMutator\TagListsModelPropertyMutator
    tags:      [{name: 'app.modelpropertymutator', priority: 270}]
  itq.modelpropertymutator.types:
    class:     Itq\Common\Plugin\ModelPropertyMutator\TypesModelPropertyMutator
    tags:      [{name: 'app.modelpropertymutator', priority: 230}]


  # plugins/modelrefreshers

  itq.modelrefresher.buildgenerateds:
    class:     Itq\Common\Plugin\ModelRefresher\BuildGeneratedsModelRefresher
    arguments: ['@app.metadata', '@app.generator']
    tags:      [{name: 'app.modelrefresher', priority: 200}]
  itq.modelrefresher.checkbasiclists:
    class:     Itq\Common\Plugin\ModelRefresher\CheckBasicListsModelRefresher
    arguments: ['@app.metadata']
    tags:      [{name: 'app.modelrefresher', priority: 240}]
  itq.modelrefresher.checkembeddedlists:
    class:     Itq\Common\Plugin\ModelRefresher\CheckEmbeddedListsModelRefresher
    arguments: ['@app.metadata', '@app.crud']
    tags:      [{name: 'app.modelrefresher', priority: 260}]
  itq.modelrefresher.checkembeddeds:
    class:     Itq\Common\Plugin\ModelRefresher\CheckEmbeddedsModelRefresher
    arguments: ['@app.metadata']
    tags:      [{name: 'app.modelrefresher', priority: 250}]
  itq.modelrefresher.checkhashlist:
    class:     Itq\Common\Plugin\ModelRefresher\CheckHashListsModelRefresher
    arguments: ['@app.metadata']
    tags:      [{name: 'app.modelrefresher', priority: 220}]
  itq.modelrefresher.checkreferences:
    class:     Itq\Common\Plugin\ModelRefresher\CheckReferencesModelRefresher
    arguments: ['@app.metadata', '@app.crud']
    tags:      [{name: 'app.modelrefresher', priority: 280}]
  itq.modelrefresher.checktaglists:
    class:     Itq\Common\Plugin\ModelRefresher\CheckTagListsModelRefresher
    arguments: ['@app.metadata']
    tags:      [{name: 'app.modelrefresher', priority: 230}]
  itq.modelrefresher.computefingerprints:
    class:     Itq\Common\Plugin\ModelRefresher\ComputeFingerPrintsModelRefresher
    arguments: ['@app.metadata', '@app.generator']
    tags:      [{name: 'app.modelrefresher', priority: 190}]
  itq.modelrefresher.convertscalarproperties:
    class:     Itq\Common\Plugin\ModelRefresher\ConvertScalarPropertiesModelRefresher
    arguments: ['@app.metadata']
    tags:      [{name: 'app.modelrefresher', priority: 290}]
  itq.modelrefresher.defaultvaluesloader:
    class:     Itq\Common\Plugin\ModelRefresher\DefaultValuesLoaderModelRefresher
    arguments: ['@app.metadata', '@app.tenant', '@app.generator']
    tags:      [{name: 'app.modelrefresher', priority: 300}]
  itq.modelrefresher.fetchembeddedreferences:
    class:     Itq\Common\Plugin\ModelRefresher\FetchEmbeddedReferencesModelRefresher
    arguments: ['@app.metadata', '@app.crud']
    tags:      [{name: 'app.modelrefresher', priority: 270}]
  itq.modelrefresher.savestorages:
    class:     Itq\Common\Plugin\ModelRefresher\SaveStoragesModelRefresher
    arguments: ['@app.metadata', '@app.storage']
    tags:      [{name: 'app.modelrefresher', priority: 180}]
  itq.modelrefresher.triggerrefreshes:
    class:     Itq\Common\Plugin\ModelRefresher\TriggerRefreshesModelRefresher
    arguments: ['@app.metadata']
    tags:      [{name: 'app.modelrefresher', priority: 210}]
  itq.modelrefresher.updatewitnesses:
    class:     Itq\Common\Plugin\ModelRefresher\UpdateWitnessesModelRefresher
    arguments: ['@app.metadata']
    tags:      [{name: 'app.modelrefresher', priority: 170}]


  # plugins/modelrestricters

  app.modelrestricter.registered:
    class:     Itq\Common\Plugin\ModelRestricter\RegisteredModelRestricter
    arguments: ['@app.metadata', '@app.crud', '@app.expression']
    tags:      [{name: 'app.modelrestricter', priority: 300}]


  # plugins/modelupdateenrichers

  app.modelupdateenricher.toggleitems:
    class:     Itq\Common\Plugin\ModelUpdateEnricher\ToggleItemsModelUpdateEnricher
    tags:      [{name: 'app.modelupdateenricher', type: 'toggleItems', priority: 300}]


  # plugins/modelfieldlistfilters

  app.modelfieldlistfilter.requirements:
    class:     Itq\Common\Plugin\ModelFieldListFilter\RequirementsModelFieldListFilter
    arguments: ['@app.metadata']
    tags:      [{name: 'app.modelfieldlistfilter', priority: 300}]


  # plugins/modelpropertylinearizers

  app.modelpropertylinearizer.datetime:
    class:     Itq\Common\Plugin\ModelPropertyLinearizer\DateTimeModelPropertyLinearizer
    tags:      [{name: 'app.modelpropertylinearizer', priority: 300}]
  app.modelpropertylinearizer.geopoint:
    class:     Itq\Common\Plugin\ModelPropertyLinearizer\GeoPointModelPropertyLinearizer
    tags:      [{name: 'app.modelpropertylinearizer', priority: 290}]
  app.modelpropertylinearizer.hash:
    class:     Itq\Common\Plugin\ModelPropertyLinearizer\HashModelPropertyLinearizer
    tags:      [{name: 'app.modelpropertylinearizer', priority: 280}]


  # plugins/modelpropertyauthorizationcheckers

  app.modelpropertyauthorizationcheckers.secure:
    class:     Itq\Common\Plugin\ModelPropertyAuthorizationChecker\SecureModelPropertyAuthorizationChecker
    arguments: ['@app.metadata', '@security.authorization_checker']
    tags:      [{name: 'app.modelpropertyauthorizationchecker', priority: 300}]


  # plugins/requestcodecs

  app.requestcodec.clientapiheader:
    class:     Itq\Common\Plugin\RequestCodec\ClientApiHeaderRequestCodec
    arguments: ['@app.date', '%app_security_client_secret%']
    calls:     [['setErrorManager', ['@app.errormanager']]]
    tags:      [{name: 'app.requestcodec', type: 'client', priority: 300}, {name: 'itq.aware.clientprovider'}]
  app.requestcodec.sudoapiheader:
    class:     Itq\Common\Plugin\RequestCodec\SudoApiHeaderRequestCodec
    arguments: ['@app.date']
    calls:     [['setErrorManager', ['@app.errormanager']]]
    tags:      [{name: 'app.requestcodec', type: 'sudo', priority: 280}]
  app.requestcodec.userapiheader:
    class:     Itq\Common\Plugin\RequestCodec\UserApiHeaderRequestCodec
    arguments: ['@app.date', '@app.userprovider', '%app_security_user_secret%']
    calls:     [['setErrorManager', ['@app.errormanager']]]
    tags:      [{name: 'app.requestcodec', type: 'user', priority: 290}]

  # plugins/criteriumtypes

  app.criteriumtype.mongo.alldecimal:
    class:     Itq\Common\Plugin\CriteriumType\Mongo\AllDecimalMongoCriteriumType
    tags:      [{name: 'app.criteriumtype', set: 'mongo', type: 'all_dec', priority: 300}]
  app.criteriumtype.mongo.allinteger:
    class:     Itq\Common\Plugin\CriteriumType\Mongo\AllIntegerMongoCriteriumType
    tags:      [{name: 'app.criteriumtype', set: 'mongo', type: 'all_int', priority: 300}]
  app.criteriumtype.mongo.all:
    class:     Itq\Common\Plugin\CriteriumType\Mongo\AllMongoCriteriumType
    tags:      [{name: 'app.criteriumtype', set: 'mongo', type: 'all', priority: 300}]
  app.criteriumtype.mongo.default:
    class:     Itq\Common\Plugin\CriteriumType\Mongo\DefaultMongoCriteriumType
    tags:      [{name: 'app.criteriumtype', set: 'mongo', type: 'default', priority: 300}]
  app.criteriumtype.mongo.empty:
    class:     Itq\Common\Plugin\CriteriumType\Mongo\EmptyMongoCriteriumType
    tags:      [{name: 'app.criteriumtype', set: 'mongo', type: 'empty', priority: 300}]
  app.criteriumtype.mongo.equaldecimal:
    class:     Itq\Common\Plugin\CriteriumType\Mongo\EqualDecimalMongoCriteriumType
    tags:      [{name: 'app.criteriumtype', set: 'mongo', type: 'eq_dec', priority: 300}]
  app.criteriumtype.mongo.equalinteger:
    class:     Itq\Common\Plugin\CriteriumType\Mongo\EqualIntegerMongoCriteriumType
    tags:      [{name: 'app.criteriumtype', set: 'mongo', type: 'eq_int', priority: 300}]
  app.criteriumtype.mongo.equal:
    class:     Itq\Common\Plugin\CriteriumType\Mongo\EqualMongoCriteriumType
    tags:      [{name: 'app.criteriumtype', set: 'mongo', type: 'eq', priority: 300}]
  app.criteriumtype.mongo.false:
    class:     Itq\Common\Plugin\CriteriumType\Mongo\FalseMongoCriteriumType
    tags:      [{name: 'app.criteriumtype', set: 'mongo', type: 'false', priority: 300}]
  app.criteriumtype.mongo.greaterthandate:
    class:     Itq\Common\Plugin\CriteriumType\Mongo\GreaterThanDateMongoCriteriumType
    tags:      [{name: 'app.criteriumtype', set: 'mongo', type: 'gt_date', priority: 300}]
  app.criteriumtype.mongo.greaterthandecimal:
    class:     Itq\Common\Plugin\CriteriumType\Mongo\GreaterThanDecimalMongoCriteriumType
    tags:      [{name: 'app.criteriumtype', set: 'mongo', type: 'gt', priority: 300}]
  app.criteriumtype.mongo.greaterthanorequaldate:
    class:     Itq\Common\Plugin\CriteriumType\Mongo\GreaterThanOrEqualDateMongoCriteriumType
    tags:      [{name: 'app.criteriumtype', set: 'mongo', type: 'gte_date', priority: 300}]
  app.criteriumtype.mongo.greaterthanorequaldecimal:
    class:     Itq\Common\Plugin\CriteriumType\Mongo\GreaterThanOrEqualDecimalMongoCriteriumType
    tags:      [{name: 'app.criteriumtype', set: 'mongo', type: 'gte', priority: 300}]
  app.criteriumtype.mongo.indecimal:
    class:     Itq\Common\Plugin\CriteriumType\Mongo\InDecimalMongoCriteriumType
    tags:      [{name: 'app.criteriumtype', set: 'mongo', type: 'in_dec', priority: 300}]
  app.criteriumtype.mongo.ininteger:
    class:     Itq\Common\Plugin\CriteriumType\Mongo\InIntegerMongoCriteriumType
    tags:      [{name: 'app.criteriumtype', set: 'mongo', type: 'in_int', priority: 300}]
  app.criteriumtype.mongo.in:
    class:     Itq\Common\Plugin\CriteriumType\Mongo\InMongoCriteriumType
    tags:      [{name: 'app.criteriumtype', set: 'mongo', type: 'in', priority: 300}]
  app.criteriumtype.mongo.lessthandate:
    class:     Itq\Common\Plugin\CriteriumType\Mongo\LessThanDateMongoCriteriumType
    tags:      [{name: 'app.criteriumtype', set: 'mongo', type: 'lt_date', priority: 300}]
  app.criteriumtype.mongo.lessthandecimal:
    class:     Itq\Common\Plugin\CriteriumType\Mongo\LessThanDecimalMongoCriteriumType
    tags:      [{name: 'app.criteriumtype', set: 'mongo', type: 'lt', priority: 300}]
  app.criteriumtype.mongo.lessthanorequaldate:
    class:     Itq\Common\Plugin\CriteriumType\Mongo\LessThanOrEqualDateMongoCriteriumType
    tags:      [{name: 'app.criteriumtype', set: 'mongo', type: 'lte_date', priority: 300}]
  app.criteriumtype.mongo.lessthanorequaldecimal:
    class:     Itq\Common\Plugin\CriteriumType\Mongo\LessThanOrEqualDecimalMongoCriteriumType
    tags:      [{name: 'app.criteriumtype', set: 'mongo', type: 'lte', priority: 300}]
  app.criteriumtype.mongo.mod:
    class:     Itq\Common\Plugin\CriteriumType\Mongo\ModMongoCriteriumType
    tags:      [{name: 'app.criteriumtype', set: 'mongo', type: 'mod', priority: 300}]
  app.criteriumtype.mongo.nearest:
    class:     Itq\Common\Plugin\CriteriumType\Mongo\NearestMongoCriteriumType
    tags:      [{name: 'app.criteriumtype', set: 'mongo', type: 'nearest', priority: 300}]
  app.criteriumtype.mongo.near:
    class:     Itq\Common\Plugin\CriteriumType\Mongo\NearMongoCriteriumType
    tags:      [{name: 'app.criteriumtype', set: 'mongo', type: 'near', priority: 300}]
  app.criteriumtype.mongo.notempty:
    class:     Itq\Common\Plugin\CriteriumType\Mongo\NotEmptyMongoCriteriumType
    tags:      [{name: 'app.criteriumtype', set: 'mongo', type: 'notempty', priority: 300}]
  app.criteriumtype.mongo.notequalbool:
    class:     Itq\Common\Plugin\CriteriumType\Mongo\NotEqualBoolMongoCriteriumType
    tags:      [{name: 'app.criteriumtype', set: 'mongo', type: 'not_bool', priority: 300}]
  app.criteriumtype.mongo.notequaldecimal:
    class:     Itq\Common\Plugin\CriteriumType\Mongo\NotEqualDecimalMongoCriteriumType
    tags:      [{name: 'app.criteriumtype', set: 'mongo', type: 'not_dec', priority: 300}]
  app.criteriumtype.mongo.notequalinteger:
    class:     Itq\Common\Plugin\CriteriumType\Mongo\NotEqualIntegerMongoCriteriumType
    tags:      [{name: 'app.criteriumtype', set: 'mongo', type: 'not_int', priority: 300}]
  app.criteriumtype.mongo.notequal:
    class:     Itq\Common\Plugin\CriteriumType\Mongo\NotEqualMongoCriteriumType
    tags:      [{name: 'app.criteriumtype', set: 'mongo', type: 'ne', priority: 300}]
  app.criteriumtype.mongo.notindecimal:
    class:     Itq\Common\Plugin\CriteriumType\Mongo\NotInDecimalMongoCriteriumType
    tags:      [{name: 'app.criteriumtype', set: 'mongo', type: 'nin_dec', priority: 300}]
  app.criteriumtype.mongo.notininteger:
    class:     Itq\Common\Plugin\CriteriumType\Mongo\NotInIntegerMongoCriteriumType
    tags:      [{name: 'app.criteriumtype', set: 'mongo', type: 'nin_int', priority: 300}]
  app.criteriumtype.mongo.notin:
    class:     Itq\Common\Plugin\CriteriumType\Mongo\NotInMongoCriteriumType
    tags:      [{name: 'app.criteriumtype', set: 'mongo', type: 'nin', priority: 300}]
  app.criteriumtype.mongo.not:
    class:     Itq\Common\Plugin\CriteriumType\Mongo\NotMongoCriteriumType
    tags:      [{name: 'app.criteriumtype', set: 'mongo', type: 'not', priority: 300}]
  app.criteriumtype.mongo.regex:
    class:     Itq\Common\Plugin\CriteriumType\Mongo\RegexMongoCriteriumType
    tags:      [{name: 'app.criteriumtype', set: 'mongo', type: 'regex', priority: 300}]
  app.criteriumtype.mongo.searchkey:
    class:     Itq\Common\Plugin\CriteriumType\Mongo\SearchKeyMongoCriteriumType
    arguments: ['@app.generator']
    tags:      [{name: 'app.criteriumtype', set: 'mongo', type: 'search_key', priority: 300}]
  app.criteriumtype.mongo.size:
    class:     Itq\Common\Plugin\CriteriumType\Mongo\SizeMongoCriteriumType
    tags:      [{name: 'app.criteriumtype', set: 'mongo', type: 'size', priority: 300}]
  app.criteriumtype.mongo.text:
    class:     Itq\Common\Plugin\CriteriumType\Mongo\TextMongoCriteriumType
    tags:      [{name: 'app.criteriumtype', set: 'mongo', type: 'text', priority: 300}]
  app.criteriumtype.mongo.true:
    class:     Itq\Common\Plugin\CriteriumType\Mongo\TrueMongoCriteriumType
    tags:      [{name: 'app.criteriumtype', set: 'mongo', type: 'true', priority: 300}]
  app.criteriumtype.mongo.where:
    class:     Itq\Common\Plugin\CriteriumType\Mongo\WhereMongoCriteriumType
    tags:      [{name: 'app.criteriumtype', set: 'mongo', type: 'where', priority: 300}]
  app.criteriumtype.mongo.withincircle:
    class:     Itq\Common\Plugin\CriteriumType\Mongo\WithinCircleMongoCriteriumType
    tags:      [{name: 'app.criteriumtype', set: 'mongo', type: 'within-circle', priority: 300}]
