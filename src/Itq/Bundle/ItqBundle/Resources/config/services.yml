parameters:

  app_env: local
  app_security_client_secret: myclientsecret
  app_security_user_secret: myusersecret
  app_googledrive_application: unknown

services:

  app.action:
    class:     Itq\Common\Service\ActionService
    lazy:      true
    arguments: ['@app.callable', '@app.expression']
  app.address:
    class:     Itq\Common\Service\AddressService
    arguments: ['@app.http', '%app_api_adresse_url%']
  app.attachment:
    class:     Itq\Common\Service\AttachmentService
    arguments: ['@app.generator', '@app.filesystem']
  app.batch:
    class:     Itq\Common\Service\BatchService
    arguments: ['@event_dispatcher']
  app.businessrule:
    class:     Itq\Common\Service\BusinessRuleService
    lazy:      true
    arguments: ['@app.tenant', '@app.context']
    tags:      [{name: 'app.workflowexecutor'}]
  app.callable:
    class:     Itq\Common\Service\CallableService
  app.codegenerator:
    class:     Itq\Common\Service\CodeGeneratorService
    arguments: ['@app.callable']
  app.connection:
    class:     Itq\Common\Service\ConnectionService
  app.context:
    class:     Itq\Common\Service\ContextService
    arguments: [{'env': '%app_env%'}]
  app.crud:
    class:     Itq\Common\Service\CrudService
    lazy:      true
    tags:      [{name: 'app.cruds_aware', method: 'add'}]
  app.customizer:
    class:     Itq\Common\Service\CustomizerService
  app.data:
    class:     Itq\Common\Service\DataService
  app.database.mongo:
    class:     Itq\Common\Service\Database\MongoDatabaseService
    arguments: ['@app.connection', '@event_dispatcher', '@app.storage', '@app.generator']
    calls:     [['setErrorManager', ['@app.errormanager']]]
  app.datafilter:
    class:     Itq\Common\Service\DataFilterService
    arguments: ['@request_stack', '@security.token_storage']
  app.date:
    class:     Itq\Common\Service\DateService
  app.documentbuilder:
    class:     Itq\Common\Service\DocumentBuilderService
    arguments: ['@app.callable']
  app.errormanager:
    class:     Itq\Common\ErrorManager
    arguments: ['@translator', '%locale%']
  app.event:
    class:     Itq\Common\Service\EventService
    lazy:      true
    arguments: ['@app.action', '@app.context']
  app.exception:
    class:     Itq\Common\Service\ExceptionService
    arguments: ['@request_stack']
  app.expression:
    class:     Itq\Common\Service\ExpressionService
    arguments: ['@app.template', '@app.expression_language']
  app.filesystem:
    class:     Itq\Common\Service\FilesystemService
    arguments: ['@app.system', '@filesystem']
  app.filter:
    class:     Itq\Common\Service\FilterService
    arguments: ['@app.callable']
  app.form:
    class:     Itq\Common\Service\FormService
    arguments: ['@form.factory']
  app.formatter:
    class:     Itq\Common\Service\FormatterService
    arguments: ['@app.callable']
  app.generator:
    class:     Itq\Common\Service\GeneratorService
    lazy:      true
    arguments: ['@app.callable']
  app.google:
    class:     Itq\Common\Service\GoogleService
    arguments: ['%app_googledrive_application%', '%app_googledrive_client%', '%app_googledrive_project%', '%app_googledrive_secret%', '%app_googledrive_storage_dir%/%app_googledrive_storage_access_token_name%']
  app.http:
    class:     Itq\Common\Service\HttpService
  app.jobtype:
    class:     Itq\Common\Service\JobTypeService
    arguments: ['@app.callable']
  app.json:
    class:     Itq\Common\Service\JsonService
  app.math:
    class:     Itq\Common\Service\MathService
  app.metadata:
    class:     Itq\Common\Service\MetaDataService
    lazy:      true
    arguments: ['%kernel.cache_dir%/preprocessor.php', '@app.crud']
  app.migration:
    class:     Itq\Common\Service\MigrationService
    arguments: ['@app.database.mongo', '@logger', '@app.form', '@service_container', 'migration', '%app_db_dir%', '%app_env%']
  app.model:
    class:     Itq\Common\Service\ModelService
    lazy:      true
    arguments: ['@security.authorization_checker', '@app.tenant', '@app.metadata', '@app.crud', '@app.storage', '@app.workflow', '@app.generator', '@app.expression']
  app.partner:
    class:     Itq\Common\Service\PartnerService
  app.password:
    class:     Itq\Common\Service\PasswordService
  app.request:
    class:     Itq\Common\Service\RequestService
    arguments: ['@app.userprovider', '@app.tokenprovider', '%app_security_client_secret%', '%app_security_user_secret%']
    calls:     [['setErrorManager', ['@app.errormanager']]]
  app.response:
    class:     Itq\Common\Service\ResponseService
    arguments: ['@app.formatter', '@app.exception']
  app.ruleengine:
    class:     Itq\Common\Service\RuleEngineService
    arguments: ['@app.callable']
  app.sdk:
    class:     Itq\Common\Service\SdkService
  app.shipping:
    class:     Itq\Common\Service\ShippingService
    arguments: ['@app.date']
  app.storage:
    class:     Itq\Common\Service\StorageService
    lazy:      true
    arguments: ['@event_dispatcher']
  app.storedfile:
    class:     Itq\Common\Service\StoredFileService
    arguments: ['@app.metadata', '@app.crud']
    calls:     [[setErrorManager, ["@app.errormanager"]]]
  app.string:
    class:     Itq\Common\Service\StringService
  app.system:
    class:     Itq\Common\Service\SystemService
  app.task:
    class:     Itq\Common\Service\TaskService
    arguments: ['@app.callable']
  app.template:
    class:     Itq\Common\Service\TemplateService
    lazy:      true
    arguments: ['@templating']
  app.tenant:
    class:     Itq\Common\Service\TenantService
    arguments: ['@security.token_storage', '%app_default_tenant%']
  app.tokenprovider:
    class:     Itq\Common\Service\TokenProviderService
  app.typeguess:
    class:     Itq\Common\Service\TypeGuessService
  app.userprovider:
    class:     Itq\Common\Service\UserProviderService
    arguments: ['%app_user_class%']
  app.vault:
    class:     Itq\Common\Service\VaultService
    arguments: ['@app.storage']
  app.workflow:
    class:     Itq\Common\Service\WorkflowService
    arguments: [~] # will be replaced by the service with tag 'app.workflowexecutor'
  app.yaml:
    class:     Itq\Common\Service\YamlService


  # commands

  itq.command.batch:
    class:     Itq\Common\Command\BatchCommand
    calls:     [['setBatchService', ['@app.batch']], ['setEnabled', ['%app_crons_enabled%']]]
    tags:      [{name: 'app.conditioned', condition: 'has_batchs'}, {name: 'console.command'}]
  itq.command.businessrulelist:
    class:     Itq\Common\Command\BusinessRuleListCommand
    calls:     [['setBusinessRuleService', ['@app.businessrule']]]
    tags:      [{name: 'app.conditioned', condition: 'has_businessrules'}, {name: 'console.command'}]
  itq.command.dbup:
    class:     Itq\Common\Command\DbUpCommand
    calls:     [['setMigrationService', ['@app.migration']], ['setMaster', ['%app_db_master%']]]
    tags:      [{name: 'app.conditioned', condition: 'has_db_connections'}, {name: 'console.command'}]
  itq.command.googledrive:
    class:     Itq\Common\Command\GoogleDriveCommand
    calls:     [['setGoogleService', ['@app.google']], ['setConfig', [{tokenFilePath: "%app_googledrive_storage_dir%/%app_googledrive_storage_access_token_name%"}]]]
    tags:      [{name: 'app.conditioned', condition: 'has_googledrive'}, {name: 'console.command'}]
  itq.command.sdkgenerate:
    class:     Itq\Common\Command\SdkGenerateCommand
    calls:     [['setSdkService', ['@app.sdk']]]
    tags:      [{name: 'app.conditioned', condition: 'has_sdks'}, {name: 'console.command'}]


  # validators

  itq.validator.businessrules:
    class:     Itq\Common\Validator\Constraints\ValidationBusinessRulesValidator
    arguments: ['@app.businessrule', '@app.metadata', '@app.errormanager']
    tags:      [{name: 'validator.constraint_validator', alias: 'app_validation_business_rules'}]


  # twig extensions

  itq.twig.extension.itq:
    class:     Itq\Common\Twig\ItqExtension
    arguments: ['%app_variables%', '@app.exception', '@app.template', '@security.token_storage']
    tags:      [{name: 'twig.extension'}]


  # twig loaders

  itq.twig.loader.string:
    class:     Twig_Extension_StringLoader
    tags:      [{name: 'twig.extension'}]


  # Symfony

  app.expression_language:
    class:     Symfony\Component\ExpressionLanguage\ExpressionLanguage
  app.annotation_reader:
    class:     Doctrine\Common\Annotations\AnnotationReader


  # others

  app.redis:
    class: Redis
    calls:
      - ['connect', ['127.0.0.1']]


  # aliases

  redis: '@app.redis'

